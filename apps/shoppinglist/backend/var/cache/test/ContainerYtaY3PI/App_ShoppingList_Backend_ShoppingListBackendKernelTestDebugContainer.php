<?php

namespace ContainerYtaY3PI;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Container;
use Symfony\Component\DependencyInjection\Exception\LogicException;
use Symfony\Component\DependencyInjection\Exception\ParameterNotFoundException;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;
use Symfony\Component\DependencyInjection\ParameterBag\FrozenParameterBag;
use Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class App_ShoppingList_Backend_ShoppingListBackendKernelTestDebugContainer extends Container
{
    protected $targetDir;
    protected $parameters = [];
    protected \Closure $getService;

    public function __construct(private array $buildParameters = [], protected string $containerDir = __DIR__)
    {
        $this->targetDir = \dirname($containerDir);
        $this->parameters = $this->getDefaultParameters();

        $this->services = $this->privates = [];
        $this->syntheticIds = [
            'behat.service_container' => true,
            'kernel' => true,
        ];
        $this->methodMap = [
            'debug.stopwatch' => 'getDebug_StopwatchService',
            'event_dispatcher' => 'getEventDispatcherService',
            'http_kernel' => 'getHttpKernelService',
            'request_stack' => 'getRequestStackService',
            'router' => 'getRouterService',
            'translator' => 'getTranslatorService',
        ];
        $this->fileMap = [
            'App\\ShoppingList\\Backend\\Controller\\HealthCheckGetController' => 'getHealthCheckGetControllerService',
            'App\\ShoppingList\\Backend\\Controller\\Usuario\\UsuarioParticularGetController' => 'getUsuarioParticularGetControllerService',
            'App\\ShoppingList\\Backend\\Controller\\Usuario\\UsuarioParticularPostController' => 'getUsuarioParticularPostControllerService',
            'App\\ShoppingList\\Backend\\Controller\\Usuario\\UsuarioParticularPutController' => 'getUsuarioParticularPutControllerService',
            'App\\ShoppingList\\Backend\\Test\\Behat\\ApiContext' => 'getApiContextService',
            'Symfony\\Bundle\\FrameworkBundle\\Controller\\RedirectController' => 'getRedirectControllerService',
            'Symfony\\Bundle\\FrameworkBundle\\Controller\\TemplateController' => 'getTemplateControllerService',
            'Tests\\Shared\\Infrastructure\\Behat\\ApiContext' => 'getApiContext2Service',
            'behat.driver.service_container' => 'getBehat_Driver_ServiceContainerService',
            'behat.mink' => 'getBehat_MinkService',
            'behat.mink.default_session' => 'getBehat_Mink_DefaultSessionService',
            'behat.mink.parameters' => 'getBehat_Mink_ParametersService',
            'cache.app' => 'getCache_AppService',
            'cache.app_clearer' => 'getCache_AppClearerService',
            'cache.global_clearer' => 'getCache_GlobalClearerService',
            'cache.system' => 'getCache_SystemService',
            'cache.system_clearer' => 'getCache_SystemClearerService',
            'cache.validator_expression_language' => 'getCache_ValidatorExpressionLanguageService',
            'cache_warmer' => 'getCacheWarmerService',
            'console.command.public_alias.tactician.command.debug' => 'getConsole_Command_PublicAlias_Tactician_Command_DebugService',
            'console.command_loader' => 'getConsole_CommandLoaderService',
            'container.env_var_processors_locator' => 'getContainer_EnvVarProcessorsLocatorService',
            'container.get_routing_condition_service' => 'getContainer_GetRoutingConditionServiceService',
            'debug.error_handler_configurator' => 'getDebug_ErrorHandlerConfiguratorService',
            'error_controller' => 'getErrorControllerService',
            'messenger.default_bus' => 'getMessenger_DefaultBusService',
            'routing.loader' => 'getRouting_LoaderService',
            'services_resetter' => 'getServicesResetterService',
            'tactician.commandbus.default' => 'getTactician_Commandbus_DefaultService',
            'test.client' => 'getTest_ClientService',
            'test.private_services_locator' => 'getTest_PrivateServicesLocatorService',
            'test.service_container' => 'getTest_ServiceContainerService',
        ];

        $this->aliases = [];
    }

    public function compile(): void
    {
        throw new LogicException('You cannot compile a dumped container that was already compiled.');
    }

    public function isCompiled(): bool
    {
        return true;
    }

    public function getRemovedIds(): array
    {
        return require $this->containerDir.\DIRECTORY_SEPARATOR.'removed-ids.php';
    }

    protected function load($file, $lazyLoad = true): mixed
    {
        if (class_exists($class = __NAMESPACE__.'\\'.$file, false)) {
            return $class::do($this, $lazyLoad);
        }

        if ('.' === $file[-4]) {
            $class = substr($class, 0, -4);
        } else {
            $file .= '.php';
        }

        $service = require $this->containerDir.\DIRECTORY_SEPARATOR.$file;

        return class_exists($class, false) ? $class::do($this, $lazyLoad) : $service;
    }

    protected function createProxy($class, \Closure $factory)
    {
        class_exists($class, false) || require __DIR__.'/'.$class.'.php';

        return $factory();
    }

    /**
     * Gets the public 'debug.stopwatch' shared service.
     *
     * @return \Symfony\Component\Stopwatch\Stopwatch
     */
    protected static function getDebug_StopwatchService($container)
    {
        return $container->services['debug.stopwatch'] = new \Symfony\Component\Stopwatch\Stopwatch(true);
    }

    /**
     * Gets the public 'event_dispatcher' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Debug\TraceableEventDispatcher
     */
    protected static function getEventDispatcherService($container)
    {
        $container->services['event_dispatcher'] = $instance = new \Symfony\Component\HttpKernel\Debug\TraceableEventDispatcher(($container->privates['debug.event_dispatcher.inner'] ??= new \Symfony\Component\EventDispatcher\EventDispatcher()), ($container->services['debug.stopwatch'] ??= new \Symfony\Component\Stopwatch\Stopwatch(true)), ($container->privates['logger'] ?? self::getLoggerService($container)), ($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()));

        $instance->addListener('kernel.controller_arguments', [#[\Closure(name: 'argument_resolver.request_payload', class: 'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\RequestPayloadValueResolver')] fn () => ($container->privates['argument_resolver.request_payload'] ?? self::getArgumentResolver_RequestPayloadService($container)), 'onKernelControllerArguments'], 0);
        $instance->addListener('kernel.response', [#[\Closure(name: 'response_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\ResponseListener')] fn () => ($container->privates['response_listener'] ??= new \Symfony\Component\HttpKernel\EventListener\ResponseListener('UTF-8', false)), 'onKernelResponse'], 0);
        $instance->addListener('kernel.request', [#[\Closure(name: 'locale_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener')] fn () => ($container->privates['locale_listener'] ?? self::getLocaleListenerService($container)), 'setDefaultLocale'], 100);
        $instance->addListener('kernel.request', [#[\Closure(name: 'locale_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener')] fn () => ($container->privates['locale_listener'] ?? self::getLocaleListenerService($container)), 'onKernelRequest'], 16);
        $instance->addListener('kernel.finish_request', [#[\Closure(name: 'locale_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener')] fn () => ($container->privates['locale_listener'] ?? self::getLocaleListenerService($container)), 'onKernelFinishRequest'], 0);
        $instance->addListener('kernel.request', [#[\Closure(name: 'validate_request_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\ValidateRequestListener')] fn () => ($container->privates['validate_request_listener'] ??= new \Symfony\Component\HttpKernel\EventListener\ValidateRequestListener()), 'onKernelRequest'], 256);
        $instance->addListener('kernel.response', [#[\Closure(name: 'disallow_search_engine_index_response_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\DisallowRobotsIndexingListener')] fn () => ($container->privates['disallow_search_engine_index_response_listener'] ??= new \Symfony\Component\HttpKernel\EventListener\DisallowRobotsIndexingListener()), 'onResponse'], -255);
        $instance->addListener('kernel.controller_arguments', [#[\Closure(name: 'exception_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\ErrorListener')] fn () => ($container->privates['exception_listener'] ?? self::getExceptionListenerService($container)), 'onControllerArguments'], 0);
        $instance->addListener('kernel.exception', [#[\Closure(name: 'exception_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\ErrorListener')] fn () => ($container->privates['exception_listener'] ?? self::getExceptionListenerService($container)), 'logKernelException'], 0);
        $instance->addListener('kernel.exception', [#[\Closure(name: 'exception_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\ErrorListener')] fn () => ($container->privates['exception_listener'] ?? self::getExceptionListenerService($container)), 'onKernelException'], -128);
        $instance->addListener('kernel.response', [#[\Closure(name: 'exception_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\ErrorListener')] fn () => ($container->privates['exception_listener'] ?? self::getExceptionListenerService($container)), 'removeCspHeader'], -128);
        $instance->addListener('kernel.controller_arguments', [#[\Closure(name: 'controller.cache_attribute_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\CacheAttributeListener')] fn () => ($container->privates['controller.cache_attribute_listener'] ??= new \Symfony\Component\HttpKernel\EventListener\CacheAttributeListener()), 'onKernelControllerArguments'], 10);
        $instance->addListener('kernel.response', [#[\Closure(name: 'controller.cache_attribute_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\CacheAttributeListener')] fn () => ($container->privates['controller.cache_attribute_listener'] ??= new \Symfony\Component\HttpKernel\EventListener\CacheAttributeListener()), 'onKernelResponse'], -10);
        $instance->addListener('kernel.request', [#[\Closure(name: 'locale_aware_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\LocaleAwareListener')] fn () => ($container->privates['locale_aware_listener'] ?? self::getLocaleAwareListenerService($container)), 'onKernelRequest'], 15);
        $instance->addListener('kernel.finish_request', [#[\Closure(name: 'locale_aware_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\LocaleAwareListener')] fn () => ($container->privates['locale_aware_listener'] ?? self::getLocaleAwareListenerService($container)), 'onKernelFinishRequest'], -15);
        $instance->addListener('console.error', [#[\Closure(name: 'console.error_listener', class: 'Symfony\\Component\\Console\\EventListener\\ErrorListener')] fn () => ($container->privates['console.error_listener'] ?? $container->load('getConsole_ErrorListenerService')), 'onConsoleError'], -128);
        $instance->addListener('console.terminate', [#[\Closure(name: 'console.error_listener', class: 'Symfony\\Component\\Console\\EventListener\\ErrorListener')] fn () => ($container->privates['console.error_listener'] ?? $container->load('getConsole_ErrorListenerService')), 'onConsoleTerminate'], -128);
        $instance->addListener('console.error', [#[\Closure(name: 'console.suggest_missing_package_subscriber', class: 'Symfony\\Bundle\\FrameworkBundle\\EventListener\\SuggestMissingPackageSubscriber')] fn () => ($container->privates['console.suggest_missing_package_subscriber'] ??= new \Symfony\Bundle\FrameworkBundle\EventListener\SuggestMissingPackageSubscriber()), 'onConsoleError'], 0);
        $instance->addListener('kernel.request', [#[\Closure(name: 'asset_mapper.dev_server_subscriber', class: 'Symfony\\Component\\AssetMapper\\AssetMapperDevServerSubscriber')] fn () => ($container->privates['asset_mapper.dev_server_subscriber'] ?? self::getAssetMapper_DevServerSubscriberService($container)), 'onKernelRequest'], 35);
        $instance->addListener('kernel.response', [#[\Closure(name: 'asset_mapper.dev_server_subscriber', class: 'Symfony\\Component\\AssetMapper\\AssetMapperDevServerSubscriber')] fn () => ($container->privates['asset_mapper.dev_server_subscriber'] ?? self::getAssetMapper_DevServerSubscriberService($container)), 'onKernelResponse'], 2048);
        $instance->addListener('Symfony\\Component\\Mailer\\Event\\MessageEvent', [#[\Closure(name: 'mailer.envelope_listener', class: 'Symfony\\Component\\Mailer\\EventListener\\EnvelopeListener')] fn () => ($container->privates['mailer.envelope_listener'] ??= new \Symfony\Component\Mailer\EventListener\EnvelopeListener(NULL, NULL, [])), 'onMessage'], -255);
        $instance->addListener('Symfony\\Component\\Mailer\\Event\\MessageEvent', [#[\Closure(name: 'mailer.message_logger_listener', class: 'Symfony\\Component\\Mailer\\EventListener\\MessageLoggerListener')] fn () => ($container->privates['mailer.message_logger_listener'] ??= new \Symfony\Component\Mailer\EventListener\MessageLoggerListener()), 'onMessage'], -255);
        $instance->addListener('Symfony\\Component\\Mailer\\Event\\MessageEvent', [#[\Closure(name: 'mailer.messenger_transport_listener', class: 'Symfony\\Component\\Mailer\\EventListener\\MessengerTransportListener')] fn () => ($container->privates['mailer.messenger_transport_listener'] ??= new \Symfony\Component\Mailer\EventListener\MessengerTransportListener()), 'onMessage'], 0);
        $instance->addListener('kernel.request', [#[\Closure(name: 'debug.debug_handlers_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\DebugHandlersListener')] fn () => ($container->privates['debug.debug_handlers_listener'] ??= new \Symfony\Component\HttpKernel\EventListener\DebugHandlersListener(NULL, $container->getEnv('bool:default::key:web:default:kernel.runtime_mode:'))), 'configure'], 2048);
        $instance->addListener('console.command', [#[\Closure(name: 'debug.debug_handlers_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\DebugHandlersListener')] fn () => ($container->privates['debug.debug_handlers_listener'] ??= new \Symfony\Component\HttpKernel\EventListener\DebugHandlersListener(NULL, $container->getEnv('bool:default::key:web:default:kernel.runtime_mode:'))), 'configure'], 2048);
        $instance->addListener('kernel.request', [#[\Closure(name: 'router_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\RouterListener')] fn () => ($container->privates['router_listener'] ?? self::getRouterListenerService($container)), 'onKernelRequest'], 32);
        $instance->addListener('kernel.finish_request', [#[\Closure(name: 'router_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\RouterListener')] fn () => ($container->privates['router_listener'] ?? self::getRouterListenerService($container)), 'onKernelFinishRequest'], 0);
        $instance->addListener('kernel.exception', [#[\Closure(name: 'router_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\RouterListener')] fn () => ($container->privates['router_listener'] ?? self::getRouterListenerService($container)), 'onKernelException'], -64);
        $instance->addListener('kernel.response', [#[\Closure(name: 'web_link.add_link_header_listener', class: 'Symfony\\Component\\WebLink\\EventListener\\AddLinkHeaderListener')] fn () => ($container->privates['web_link.add_link_header_listener'] ?? self::getWebLink_AddLinkHeaderListenerService($container)), 'onKernelResponse'], 0);
        $instance->addListener('Symfony\\Component\\Messenger\\Event\\WorkerMessageFailedEvent', [#[\Closure(name: 'messenger.retry.send_failed_message_for_retry_listener', class: 'Symfony\\Component\\Messenger\\EventListener\\SendFailedMessageForRetryListener')] fn () => ($container->privates['messenger.retry.send_failed_message_for_retry_listener'] ?? $container->load('getMessenger_Retry_SendFailedMessageForRetryListenerService')), 'onMessageFailed'], 100);
        $instance->addListener('Symfony\\Component\\Messenger\\Event\\WorkerMessageFailedEvent', [#[\Closure(name: 'messenger.failure.add_error_details_stamp_listener', class: 'Symfony\\Component\\Messenger\\EventListener\\AddErrorDetailsStampListener')] fn () => ($container->privates['messenger.failure.add_error_details_stamp_listener'] ??= new \Symfony\Component\Messenger\EventListener\AddErrorDetailsStampListener()), 'onMessageFailed'], 200);
        $instance->addListener('Symfony\\Component\\Messenger\\Event\\WorkerStartedEvent', [#[\Closure(name: 'messenger.listener.stop_worker_on_restart_signal_listener', class: 'Symfony\\Component\\Messenger\\EventListener\\StopWorkerOnRestartSignalListener')] fn () => ($container->privates['messenger.listener.stop_worker_on_restart_signal_listener'] ?? $container->load('getMessenger_Listener_StopWorkerOnRestartSignalListenerService')), 'onWorkerStarted'], 0);
        $instance->addListener('Symfony\\Component\\Messenger\\Event\\WorkerRunningEvent', [#[\Closure(name: 'messenger.listener.stop_worker_on_restart_signal_listener', class: 'Symfony\\Component\\Messenger\\EventListener\\StopWorkerOnRestartSignalListener')] fn () => ($container->privates['messenger.listener.stop_worker_on_restart_signal_listener'] ?? $container->load('getMessenger_Listener_StopWorkerOnRestartSignalListenerService')), 'onWorkerRunning'], 0);
        $instance->addListener('Symfony\\Component\\Messenger\\Event\\WorkerMessageFailedEvent', [#[\Closure(name: 'messenger.listener.stop_worker_on_stop_exception_listener', class: 'Symfony\\Component\\Messenger\\EventListener\\StopWorkerOnCustomStopExceptionListener')] fn () => ($container->privates['messenger.listener.stop_worker_on_stop_exception_listener'] ??= new \Symfony\Component\Messenger\EventListener\StopWorkerOnCustomStopExceptionListener()), 'onMessageFailed'], 0);
        $instance->addListener('Symfony\\Component\\Messenger\\Event\\WorkerRunningEvent', [#[\Closure(name: 'messenger.listener.stop_worker_on_stop_exception_listener', class: 'Symfony\\Component\\Messenger\\EventListener\\StopWorkerOnCustomStopExceptionListener')] fn () => ($container->privates['messenger.listener.stop_worker_on_stop_exception_listener'] ??= new \Symfony\Component\Messenger\EventListener\StopWorkerOnCustomStopExceptionListener()), 'onWorkerRunning'], 0);
        $instance->addListener('Symfony\\Component\\Notifier\\Event\\MessageEvent', [#[\Closure(name: 'notifier.notification_logger_listener', class: 'Symfony\\Component\\Notifier\\EventListener\\NotificationLoggerListener')] fn () => ($container->privates['notifier.notification_logger_listener'] ??= new \Symfony\Component\Notifier\EventListener\NotificationLoggerListener()), 'onNotification'], -255);

        return $instance;
    }

    /**
     * Gets the public 'http_kernel' shared service.
     *
     * @return \Symfony\Component\HttpKernel\HttpKernel
     */
    protected static function getHttpKernelService($container)
    {
        return $container->services['http_kernel'] = new \Symfony\Component\HttpKernel\HttpKernel(($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->privates['debug.controller_resolver'] ?? self::getDebug_ControllerResolverService($container)), ($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), ($container->privates['debug.argument_resolver'] ?? self::getDebug_ArgumentResolverService($container)), true);
    }

    /**
     * Gets the public 'request_stack' shared service.
     *
     * @return \Symfony\Component\HttpFoundation\RequestStack
     */
    protected static function getRequestStackService($container)
    {
        return $container->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack();
    }

    /**
     * Gets the public 'router' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Routing\Router
     */
    protected static function getRouterService($container)
    {
        $container->services['router'] = $instance = new \Symfony\Bundle\FrameworkBundle\Routing\Router((new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'routing.loader' => ['services', 'routing.loader', 'getRouting_LoaderService', true],
        ], [
            'routing.loader' => 'Symfony\\Component\\Config\\Loader\\LoaderInterface',
        ]))->withContext('router.default', $container), 'kernel::loadRoutes', ['cache_dir' => $container->targetDir.'', 'debug' => true, 'generator_class' => 'Symfony\\Component\\Routing\\Generator\\CompiledUrlGenerator', 'generator_dumper_class' => 'Symfony\\Component\\Routing\\Generator\\Dumper\\CompiledUrlGeneratorDumper', 'matcher_class' => 'Symfony\\Bundle\\FrameworkBundle\\Routing\\RedirectableCompiledUrlMatcher', 'matcher_dumper_class' => 'Symfony\\Component\\Routing\\Matcher\\Dumper\\CompiledUrlMatcherDumper', 'strict_requirements' => true, 'resource_type' => 'service'], ($container->privates['router.request_context'] ?? self::getRouter_RequestContextService($container)), ($container->privates['parameter_bag'] ??= new \Symfony\Component\DependencyInjection\ParameterBag\ContainerBag($container)), ($container->privates['logger'] ?? self::getLoggerService($container)), 'en');

        $instance->setConfigCacheFactory(($container->privates['config_cache_factory'] ?? self::getConfigCacheFactoryService($container)));
        $instance->addExpressionLanguageProvider(($container->privates['router.expression_language_provider'] ?? self::getRouter_ExpressionLanguageProviderService($container)));

        return $instance;
    }

    /**
     * Gets the public 'translator' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Translation\Translator
     */
    protected static function getTranslatorService($container)
    {
        $container->services['translator'] = $instance = new \Symfony\Bundle\FrameworkBundle\Translation\Translator(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'translation.loader.php' => ['privates', 'translation.loader.php', 'getTranslation_Loader_PhpService', true],
            'translation.loader.yml' => ['privates', 'translation.loader.yml', 'getTranslation_Loader_YmlService', true],
            'translation.loader.xliff' => ['privates', 'translation.loader.xliff', 'getTranslation_Loader_XliffService', true],
            'translation.loader.po' => ['privates', 'translation.loader.po', 'getTranslation_Loader_PoService', true],
            'translation.loader.mo' => ['privates', 'translation.loader.mo', 'getTranslation_Loader_MoService', true],
            'translation.loader.qt' => ['privates', 'translation.loader.qt', 'getTranslation_Loader_QtService', true],
            'translation.loader.csv' => ['privates', 'translation.loader.csv', 'getTranslation_Loader_CsvService', true],
            'translation.loader.res' => ['privates', 'translation.loader.res', 'getTranslation_Loader_ResService', true],
            'translation.loader.dat' => ['privates', 'translation.loader.dat', 'getTranslation_Loader_DatService', true],
            'translation.loader.ini' => ['privates', 'translation.loader.ini', 'getTranslation_Loader_IniService', true],
            'translation.loader.json' => ['privates', 'translation.loader.json', 'getTranslation_Loader_JsonService', true],
        ], [
            'translation.loader.php' => '?',
            'translation.loader.yml' => '?',
            'translation.loader.xliff' => '?',
            'translation.loader.po' => '?',
            'translation.loader.mo' => '?',
            'translation.loader.qt' => '?',
            'translation.loader.csv' => '?',
            'translation.loader.res' => '?',
            'translation.loader.dat' => '?',
            'translation.loader.ini' => '?',
            'translation.loader.json' => '?',
        ]), ($container->privates['translator.formatter.default'] ?? self::getTranslator_Formatter_DefaultService($container)), 'en', ['translation.loader.php' => ['php'], 'translation.loader.yml' => ['yaml', 'yml'], 'translation.loader.xliff' => ['xlf', 'xliff'], 'translation.loader.po' => ['po'], 'translation.loader.mo' => ['mo'], 'translation.loader.qt' => ['ts'], 'translation.loader.csv' => ['csv'], 'translation.loader.res' => ['res'], 'translation.loader.dat' => ['dat'], 'translation.loader.ini' => ['ini'], 'translation.loader.json' => ['json']], ['cache_dir' => ($container->targetDir.''.'/translations'), 'debug' => true, 'resource_files' => ['af' => ['C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\validator/Resources/translations\\validators.af.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\form/Resources/translations\\validators.af.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\security-core/Resources/translations\\security.af.xlf'], 'ar' => ['C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\validator/Resources/translations\\validators.ar.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\form/Resources/translations\\validators.ar.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\security-core/Resources/translations\\security.ar.xlf'], 'az' => ['C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\validator/Resources/translations\\validators.az.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\form/Resources/translations\\validators.az.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\security-core/Resources/translations\\security.az.xlf'], 'be' => ['C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\validator/Resources/translations\\validators.be.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\form/Resources/translations\\validators.be.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\security-core/Resources/translations\\security.be.xlf'], 'bg' => ['C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\validator/Resources/translations\\validators.bg.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\form/Resources/translations\\validators.bg.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\security-core/Resources/translations\\security.bg.xlf'], 'bs' => ['C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\validator/Resources/translations\\validators.bs.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\form/Resources/translations\\validators.bs.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\security-core/Resources/translations\\security.bs.xlf'], 'ca' => ['C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\validator/Resources/translations\\validators.ca.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\form/Resources/translations\\validators.ca.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\security-core/Resources/translations\\security.ca.xlf'], 'cs' => ['C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\validator/Resources/translations\\validators.cs.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\form/Resources/translations\\validators.cs.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\security-core/Resources/translations\\security.cs.xlf'], 'cy' => ['C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\validator/Resources/translations\\validators.cy.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\form/Resources/translations\\validators.cy.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\security-core/Resources/translations\\security.cy.xlf'], 'da' => ['C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\validator/Resources/translations\\validators.da.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\form/Resources/translations\\validators.da.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\security-core/Resources/translations\\security.da.xlf'], 'de' => ['C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\validator/Resources/translations\\validators.de.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\form/Resources/translations\\validators.de.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\security-core/Resources/translations\\security.de.xlf'], 'el' => ['C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\validator/Resources/translations\\validators.el.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\form/Resources/translations\\validators.el.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\security-core/Resources/translations\\security.el.xlf'], 'en' => ['C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\validator/Resources/translations\\validators.en.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\form/Resources/translations\\validators.en.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\security-core/Resources/translations\\security.en.xlf'], 'es' => ['C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\validator/Resources/translations\\validators.es.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\form/Resources/translations\\validators.es.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\security-core/Resources/translations\\security.es.xlf'], 'et' => ['C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\validator/Resources/translations\\validators.et.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\form/Resources/translations\\validators.et.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\security-core/Resources/translations\\security.et.xlf'], 'eu' => ['C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\validator/Resources/translations\\validators.eu.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\form/Resources/translations\\validators.eu.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\security-core/Resources/translations\\security.eu.xlf'], 'fa' => ['C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\validator/Resources/translations\\validators.fa.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\form/Resources/translations\\validators.fa.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\security-core/Resources/translations\\security.fa.xlf'], 'fi' => ['C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\validator/Resources/translations\\validators.fi.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\form/Resources/translations\\validators.fi.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\security-core/Resources/translations\\security.fi.xlf'], 'fr' => ['C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\validator/Resources/translations\\validators.fr.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\form/Resources/translations\\validators.fr.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\security-core/Resources/translations\\security.fr.xlf'], 'gl' => ['C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\validator/Resources/translations\\validators.gl.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\form/Resources/translations\\validators.gl.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\security-core/Resources/translations\\security.gl.xlf'], 'he' => ['C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\validator/Resources/translations\\validators.he.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\form/Resources/translations\\validators.he.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\security-core/Resources/translations\\security.he.xlf'], 'hr' => ['C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\validator/Resources/translations\\validators.hr.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\form/Resources/translations\\validators.hr.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\security-core/Resources/translations\\security.hr.xlf'], 'hu' => ['C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\validator/Resources/translations\\validators.hu.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\form/Resources/translations\\validators.hu.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\security-core/Resources/translations\\security.hu.xlf'], 'hy' => ['C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\validator/Resources/translations\\validators.hy.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\form/Resources/translations\\validators.hy.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\security-core/Resources/translations\\security.hy.xlf'], 'id' => ['C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\validator/Resources/translations\\validators.id.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\form/Resources/translations\\validators.id.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\security-core/Resources/translations\\security.id.xlf'], 'it' => ['C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\validator/Resources/translations\\validators.it.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\form/Resources/translations\\validators.it.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\security-core/Resources/translations\\security.it.xlf'], 'ja' => ['C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\validator/Resources/translations\\validators.ja.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\form/Resources/translations\\validators.ja.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\security-core/Resources/translations\\security.ja.xlf'], 'lb' => ['C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\validator/Resources/translations\\validators.lb.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\form/Resources/translations\\validators.lb.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\security-core/Resources/translations\\security.lb.xlf'], 'lt' => ['C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\validator/Resources/translations\\validators.lt.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\form/Resources/translations\\validators.lt.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\security-core/Resources/translations\\security.lt.xlf'], 'lv' => ['C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\validator/Resources/translations\\validators.lv.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\form/Resources/translations\\validators.lv.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\security-core/Resources/translations\\security.lv.xlf'], 'mk' => ['C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\validator/Resources/translations\\validators.mk.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\form/Resources/translations\\validators.mk.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\security-core/Resources/translations\\security.mk.xlf'], 'mn' => ['C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\validator/Resources/translations\\validators.mn.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\form/Resources/translations\\validators.mn.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\security-core/Resources/translations\\security.mn.xlf'], 'my' => ['C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\validator/Resources/translations\\validators.my.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\form/Resources/translations\\validators.my.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\security-core/Resources/translations\\security.my.xlf'], 'nb' => ['C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\validator/Resources/translations\\validators.nb.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\form/Resources/translations\\validators.nb.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\security-core/Resources/translations\\security.nb.xlf'], 'nl' => ['C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\validator/Resources/translations\\validators.nl.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\form/Resources/translations\\validators.nl.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\security-core/Resources/translations\\security.nl.xlf'], 'nn' => ['C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\validator/Resources/translations\\validators.nn.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\form/Resources/translations\\validators.nn.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\security-core/Resources/translations\\security.nn.xlf'], 'no' => ['C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\validator/Resources/translations\\validators.no.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\form/Resources/translations\\validators.no.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\security-core/Resources/translations\\security.no.xlf'], 'pl' => ['C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\validator/Resources/translations\\validators.pl.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\form/Resources/translations\\validators.pl.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\security-core/Resources/translations\\security.pl.xlf'], 'pt' => ['C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\validator/Resources/translations\\validators.pt.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\form/Resources/translations\\validators.pt.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\security-core/Resources/translations\\security.pt.xlf'], 'pt_BR' => ['C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\validator/Resources/translations\\validators.pt_BR.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\form/Resources/translations\\validators.pt_BR.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\security-core/Resources/translations\\security.pt_BR.xlf'], 'ro' => ['C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\validator/Resources/translations\\validators.ro.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\form/Resources/translations\\validators.ro.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\security-core/Resources/translations\\security.ro.xlf'], 'ru' => ['C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\validator/Resources/translations\\validators.ru.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\form/Resources/translations\\validators.ru.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\security-core/Resources/translations\\security.ru.xlf'], 'sk' => ['C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\validator/Resources/translations\\validators.sk.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\form/Resources/translations\\validators.sk.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\security-core/Resources/translations\\security.sk.xlf'], 'sl' => ['C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\validator/Resources/translations\\validators.sl.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\form/Resources/translations\\validators.sl.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\security-core/Resources/translations\\security.sl.xlf'], 'sq' => ['C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\validator/Resources/translations\\validators.sq.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\form/Resources/translations\\validators.sq.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\security-core/Resources/translations\\security.sq.xlf'], 'sr_Cyrl' => ['C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\validator/Resources/translations\\validators.sr_Cyrl.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\form/Resources/translations\\validators.sr_Cyrl.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\security-core/Resources/translations\\security.sr_Cyrl.xlf'], 'sr_Latn' => ['C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\validator/Resources/translations\\validators.sr_Latn.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\form/Resources/translations\\validators.sr_Latn.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\security-core/Resources/translations\\security.sr_Latn.xlf'], 'sv' => ['C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\validator/Resources/translations\\validators.sv.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\form/Resources/translations\\validators.sv.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\security-core/Resources/translations\\security.sv.xlf'], 'th' => ['C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\validator/Resources/translations\\validators.th.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\form/Resources/translations\\validators.th.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\security-core/Resources/translations\\security.th.xlf'], 'tl' => ['C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\validator/Resources/translations\\validators.tl.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\form/Resources/translations\\validators.tl.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\security-core/Resources/translations\\security.tl.xlf'], 'tr' => ['C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\validator/Resources/translations\\validators.tr.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\form/Resources/translations\\validators.tr.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\security-core/Resources/translations\\security.tr.xlf'], 'uk' => ['C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\validator/Resources/translations\\validators.uk.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\form/Resources/translations\\validators.uk.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\security-core/Resources/translations\\security.uk.xlf'], 'ur' => ['C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\validator/Resources/translations\\validators.ur.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\form/Resources/translations\\validators.ur.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\security-core/Resources/translations\\security.ur.xlf'], 'uz' => ['C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\validator/Resources/translations\\validators.uz.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\form/Resources/translations\\validators.uz.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\security-core/Resources/translations\\security.uz.xlf'], 'vi' => ['C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\validator/Resources/translations\\validators.vi.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\form/Resources/translations\\validators.vi.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\security-core/Resources/translations\\security.vi.xlf'], 'zh_CN' => ['C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\validator/Resources/translations\\validators.zh_CN.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\form/Resources/translations\\validators.zh_CN.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\security-core/Resources/translations\\security.zh_CN.xlf'], 'zh_TW' => ['C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\validator/Resources/translations\\validators.zh_TW.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\form/Resources/translations\\validators.zh_TW.xlf', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\security-core/Resources/translations\\security.zh_TW.xlf']], 'scanned_directories' => ['C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\validator/Resources/translations', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\form/Resources/translations', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\security-core/Resources/translations', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\framework-bundle/translations', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\league\\tactician-bundle\\src/translations', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\doctrine\\doctrine-bundle/translations', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\friends-of-behat\\symfony-extension\\src\\Bundle/translations', (\dirname(__DIR__, 4).'/translations')], 'cache_vary' => ['scanned_directories' => ['C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\validator/Resources/translations', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\form/Resources/translations', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\security-core/Resources/translations', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\framework-bundle/translations', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\league\\tactician-bundle\\src/translations', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\doctrine\\doctrine-bundle/translations', 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\friends-of-behat\\symfony-extension\\src\\Bundle/translations', 'translations']]], []);

        $instance->setConfigCacheFactory(($container->privates['config_cache_factory'] ?? self::getConfigCacheFactoryService($container)));
        $instance->setFallbackLocales(['en']);

        return $instance;
    }

    /**
     * Gets the private 'argument_metadata_factory' shared service.
     *
     * @return \Symfony\Component\HttpKernel\ControllerMetadata\ArgumentMetadataFactory
     */
    protected static function getArgumentMetadataFactoryService($container)
    {
        return $container->privates['argument_metadata_factory'] = new \Symfony\Component\HttpKernel\ControllerMetadata\ArgumentMetadataFactory();
    }

    /**
     * Gets the private 'argument_resolver.request_payload' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestPayloadValueResolver
     */
    protected static function getArgumentResolver_RequestPayloadService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['argument_resolver.request_payload'] = $container->createProxy('RequestPayloadValueResolverGhost5fe05e7', static fn () => \RequestPayloadValueResolverGhost5fe05e7::createLazyGhost(static fn ($proxy) => self::getArgumentResolver_RequestPayloadService($container, $proxy)));
        }

        return ($lazyLoad->__construct(($container->privates['serializer'] ?? self::getSerializerService($container)), ($container->privates['validator'] ?? self::getValidatorService($container)), ($container->services['translator'] ?? self::getTranslatorService($container))) && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'asset_mapper' shared service.
     *
     * @return \Symfony\Component\AssetMapper\AssetMapper
     */
    protected static function getAssetMapperService($container)
    {
        $a = ($container->privates['asset_mapper.cached_mapped_asset_factory'] ?? self::getAssetMapper_CachedMappedAssetFactoryService($container));

        if (isset($container->privates['asset_mapper'])) {
            return $container->privates['asset_mapper'];
        }

        return $container->privates['asset_mapper'] = new \Symfony\Component\AssetMapper\AssetMapper(($container->privates['asset_mapper.repository'] ?? self::getAssetMapper_RepositoryService($container)), $a, ($container->privates['asset_mapper.compiled_asset_mapper_config_reader'] ??= new \Symfony\Component\AssetMapper\CompiledAssetMapperConfigReader((\dirname(__DIR__, 4).'/public/assets'))));
    }

    /**
     * Gets the private 'asset_mapper.cached_mapped_asset_factory' shared service.
     *
     * @return \Symfony\Component\AssetMapper\Factory\CachedMappedAssetFactory
     */
    protected static function getAssetMapper_CachedMappedAssetFactoryService($container)
    {
        $a = ($container->privates['asset_mapper.cached_mapped_asset_factory.inner'] ?? self::getAssetMapper_CachedMappedAssetFactory_InnerService($container));

        if (isset($container->privates['asset_mapper.cached_mapped_asset_factory'])) {
            return $container->privates['asset_mapper.cached_mapped_asset_factory'];
        }

        return $container->privates['asset_mapper.cached_mapped_asset_factory'] = new \Symfony\Component\AssetMapper\Factory\CachedMappedAssetFactory($a, ($container->targetDir.''.'/asset_mapper'), true);
    }

    /**
     * Gets the private 'asset_mapper.cached_mapped_asset_factory.inner' shared service.
     *
     * @return \Symfony\Component\AssetMapper\Factory\MappedAssetFactory
     */
    protected static function getAssetMapper_CachedMappedAssetFactory_InnerService($container)
    {
        $a = ($container->privates['asset_mapper_compiler'] ?? self::getAssetMapperCompilerService($container));

        if (isset($container->privates['asset_mapper.cached_mapped_asset_factory.inner'])) {
            return $container->privates['asset_mapper.cached_mapped_asset_factory.inner'];
        }

        return $container->privates['asset_mapper.cached_mapped_asset_factory.inner'] = new \Symfony\Component\AssetMapper\Factory\MappedAssetFactory(($container->privates['asset_mapper.public_assets_path_resolver'] ??= new \Symfony\Component\AssetMapper\Path\PublicAssetsPathResolver('/assets/')), $a, (\dirname(__DIR__, 4).'/assets/vendor'));
    }

    /**
     * Gets the private 'asset_mapper.compiled_asset_mapper_config_reader' shared service.
     *
     * @return \Symfony\Component\AssetMapper\CompiledAssetMapperConfigReader
     */
    protected static function getAssetMapper_CompiledAssetMapperConfigReaderService($container)
    {
        return $container->privates['asset_mapper.compiled_asset_mapper_config_reader'] = new \Symfony\Component\AssetMapper\CompiledAssetMapperConfigReader((\dirname(__DIR__, 4).'/public/assets'));
    }

    /**
     * Gets the private 'asset_mapper.dev_server_subscriber' shared service.
     *
     * @return \Symfony\Component\AssetMapper\AssetMapperDevServerSubscriber
     */
    protected static function getAssetMapper_DevServerSubscriberService($container)
    {
        return $container->privates['asset_mapper.dev_server_subscriber'] = new \Symfony\Component\AssetMapper\AssetMapperDevServerSubscriber(($container->privates['asset_mapper'] ?? self::getAssetMapperService($container)), '/assets/', [], ($container->privates['cache.asset_mapper'] ?? self::getCache_AssetMapperService($container)), NULL);
    }

    /**
     * Gets the private 'asset_mapper.public_assets_path_resolver' shared service.
     *
     * @return \Symfony\Component\AssetMapper\Path\PublicAssetsPathResolver
     */
    protected static function getAssetMapper_PublicAssetsPathResolverService($container)
    {
        return $container->privates['asset_mapper.public_assets_path_resolver'] = new \Symfony\Component\AssetMapper\Path\PublicAssetsPathResolver('/assets/');
    }

    /**
     * Gets the private 'asset_mapper.repository' shared service.
     *
     * @return \Symfony\Component\AssetMapper\AssetMapperRepository
     */
    protected static function getAssetMapper_RepositoryService($container)
    {
        return $container->privates['asset_mapper.repository'] = new \Symfony\Component\AssetMapper\AssetMapperRepository([], \dirname(__DIR__, 4), [], true, true);
    }

    /**
     * Gets the private 'asset_mapper_compiler' shared service.
     *
     * @return \Symfony\Component\AssetMapper\AssetMapperCompiler
     */
    protected static function getAssetMapperCompilerService($container)
    {
        return $container->privates['asset_mapper_compiler'] = new \Symfony\Component\AssetMapper\AssetMapperCompiler(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['asset_mapper.compiler.css_asset_url_compiler'] ?? $container->load('getAssetMapper_Compiler_CssAssetUrlCompilerService'));
            yield 1 => ($container->privates['asset_mapper.compiler.source_mapping_urls_compiler'] ??= new \Symfony\Component\AssetMapper\Compiler\SourceMappingUrlsCompiler());
            yield 2 => ($container->privates['asset_mapper.compiler.javascript_import_path_compiler'] ?? $container->load('getAssetMapper_Compiler_JavascriptImportPathCompilerService'));
        }, 3), #[\Closure(name: 'asset_mapper', class: 'Symfony\\Component\\AssetMapper\\AssetMapper')] fn () => ($container->privates['asset_mapper'] ?? self::getAssetMapperService($container)));
    }

    /**
     * Gets the private 'cache.asset_mapper' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\AdapterInterface
     */
    protected static function getCache_AssetMapperService($container)
    {
        return $container->privates['cache.asset_mapper'] = \Symfony\Component\Cache\Adapter\AbstractAdapter::createSystemCache('JMvXWIafLs', 0, $container->getParameter('container.build_id'), ($container->targetDir.''.'/pools/system'), ($container->privates['logger'] ?? self::getLoggerService($container)));
    }

    /**
     * Gets the private 'cache.property_access' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\ArrayAdapter
     */
    protected static function getCache_PropertyAccessService($container)
    {
        return $container->privates['cache.property_access'] = new \Symfony\Component\Cache\Adapter\ArrayAdapter(0, false);
    }

    /**
     * Gets the private 'config_cache_factory' shared service.
     *
     * @return \Symfony\Component\Config\ResourceCheckerConfigCacheFactory
     */
    protected static function getConfigCacheFactoryService($container)
    {
        return $container->privates['config_cache_factory'] = new \Symfony\Component\Config\ResourceCheckerConfigCacheFactory(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['dependency_injection.config.container_parameters_resource_checker'] ??= new \Symfony\Component\DependencyInjection\Config\ContainerParametersResourceChecker($container));
            yield 1 => ($container->privates['config.resource.self_checking_resource_checker'] ??= new \Symfony\Component\Config\Resource\SelfCheckingResourceChecker());
        }, 2));
    }

    /**
     * Gets the private 'controller.cache_attribute_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\CacheAttributeListener
     */
    protected static function getController_CacheAttributeListenerService($container)
    {
        return $container->privates['controller.cache_attribute_listener'] = new \Symfony\Component\HttpKernel\EventListener\CacheAttributeListener();
    }

    /**
     * Gets the private 'debug.argument_resolver' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Controller\TraceableArgumentResolver
     */
    protected static function getDebug_ArgumentResolverService($container)
    {
        return $container->privates['debug.argument_resolver'] = new \Symfony\Component\HttpKernel\Controller\TraceableArgumentResolver(($container->privates['debug.argument_resolver.inner'] ?? self::getDebug_ArgumentResolver_InnerService($container)), ($container->services['debug.stopwatch'] ??= new \Symfony\Component\Stopwatch\Stopwatch(true)));
    }

    /**
     * Gets the private 'debug.argument_resolver.inner' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Controller\ArgumentResolver
     */
    protected static function getDebug_ArgumentResolver_InnerService($container)
    {
        return $container->privates['debug.argument_resolver.inner'] = new \Symfony\Component\HttpKernel\Controller\ArgumentResolver(($container->privates['argument_metadata_factory'] ??= new \Symfony\Component\HttpKernel\ControllerMetadata\ArgumentMetadataFactory()), new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['.debug.value_resolver.argument_resolver.backed_enum_resolver'] ?? $container->load('get_Debug_ValueResolver_ArgumentResolver_BackedEnumResolverService'));
            yield 1 => ($container->privates['.debug.value_resolver.argument_resolver.datetime'] ?? $container->load('get_Debug_ValueResolver_ArgumentResolver_DatetimeService'));
            yield 2 => ($container->privates['.debug.value_resolver.argument_resolver.request_attribute'] ?? $container->load('get_Debug_ValueResolver_ArgumentResolver_RequestAttributeService'));
            yield 3 => ($container->privates['.debug.value_resolver.argument_resolver.request'] ?? $container->load('get_Debug_ValueResolver_ArgumentResolver_RequestService'));
            yield 4 => ($container->privates['.debug.value_resolver.argument_resolver.session'] ?? $container->load('get_Debug_ValueResolver_ArgumentResolver_SessionService'));
            yield 5 => ($container->privates['.debug.value_resolver.argument_resolver.service'] ?? $container->load('get_Debug_ValueResolver_ArgumentResolver_ServiceService'));
            yield 6 => ($container->privates['.debug.value_resolver.argument_resolver.default'] ?? $container->load('get_Debug_ValueResolver_ArgumentResolver_DefaultService'));
            yield 7 => ($container->privates['.debug.value_resolver.argument_resolver.variadic'] ?? $container->load('get_Debug_ValueResolver_ArgumentResolver_VariadicService'));
            yield 8 => ($container->privates['.debug.value_resolver.argument_resolver.not_tagged_controller'] ?? $container->load('get_Debug_ValueResolver_ArgumentResolver_NotTaggedControllerService'));
        }, 9), new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\RequestPayloadValueResolver' => ['privates', '.debug.value_resolver.argument_resolver.request_payload', 'get_Debug_ValueResolver_ArgumentResolver_RequestPayloadService', true],
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\QueryParameterValueResolver' => ['privates', '.debug.value_resolver.argument_resolver.query_parameter_value_resolver', 'get_Debug_ValueResolver_ArgumentResolver_QueryParameterValueResolverService', true],
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\BackedEnumValueResolver' => ['privates', '.debug.value_resolver.argument_resolver.backed_enum_resolver', 'get_Debug_ValueResolver_ArgumentResolver_BackedEnumResolverService', true],
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\DateTimeValueResolver' => ['privates', '.debug.value_resolver.argument_resolver.datetime', 'get_Debug_ValueResolver_ArgumentResolver_DatetimeService', true],
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\RequestAttributeValueResolver' => ['privates', '.debug.value_resolver.argument_resolver.request_attribute', 'get_Debug_ValueResolver_ArgumentResolver_RequestAttributeService', true],
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\RequestValueResolver' => ['privates', '.debug.value_resolver.argument_resolver.request', 'get_Debug_ValueResolver_ArgumentResolver_RequestService', true],
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\SessionValueResolver' => ['privates', '.debug.value_resolver.argument_resolver.session', 'get_Debug_ValueResolver_ArgumentResolver_SessionService', true],
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\ServiceValueResolver' => ['privates', '.debug.value_resolver.argument_resolver.service', 'get_Debug_ValueResolver_ArgumentResolver_ServiceService', true],
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\DefaultValueResolver' => ['privates', '.debug.value_resolver.argument_resolver.default', 'get_Debug_ValueResolver_ArgumentResolver_DefaultService', true],
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\VariadicValueResolver' => ['privates', '.debug.value_resolver.argument_resolver.variadic', 'get_Debug_ValueResolver_ArgumentResolver_VariadicService', true],
            'argument_resolver.not_tagged_controller' => ['privates', '.debug.value_resolver.argument_resolver.not_tagged_controller', 'get_Debug_ValueResolver_ArgumentResolver_NotTaggedControllerService', true],
        ], [
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\RequestPayloadValueResolver' => '?',
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\QueryParameterValueResolver' => '?',
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\BackedEnumValueResolver' => '?',
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\DateTimeValueResolver' => '?',
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\RequestAttributeValueResolver' => '?',
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\RequestValueResolver' => '?',
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\SessionValueResolver' => '?',
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\ServiceValueResolver' => '?',
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\DefaultValueResolver' => '?',
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\VariadicValueResolver' => '?',
            'argument_resolver.not_tagged_controller' => '?',
        ]));
    }

    /**
     * Gets the private 'debug.controller_resolver' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Controller\TraceableControllerResolver
     */
    protected static function getDebug_ControllerResolverService($container)
    {
        return $container->privates['debug.controller_resolver'] = new \Symfony\Component\HttpKernel\Controller\TraceableControllerResolver(($container->privates['debug.controller_resolver.inner'] ?? self::getDebug_ControllerResolver_InnerService($container)), ($container->services['debug.stopwatch'] ??= new \Symfony\Component\Stopwatch\Stopwatch(true)));
    }

    /**
     * Gets the private 'debug.controller_resolver.inner' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Controller\ControllerResolver
     */
    protected static function getDebug_ControllerResolver_InnerService($container)
    {
        $container->privates['debug.controller_resolver.inner'] = $instance = new \Symfony\Bundle\FrameworkBundle\Controller\ControllerResolver($container, ($container->privates['logger'] ?? self::getLoggerService($container)));

        $instance->allowControllers(['Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController', 'Symfony\\Bundle\\FrameworkBundle\\Controller\\TemplateController']);
        $instance->allowControllers(['App\\ShoppingList\\Backend\\ShoppingListBackendKernel', 'App\\ShoppingList\\Backend\\Controller\\HealthCheckGetController', 'App\\ShoppingList\\Backend\\Controller\\Usuario\\UsuarioParticularGetController', 'App\\ShoppingList\\Backend\\Controller\\Usuario\\UsuarioParticularPostController', 'App\\ShoppingList\\Backend\\Controller\\Usuario\\UsuarioParticularPutController']);

        return $instance;
    }

    /**
     * Gets the private 'debug.debug_handlers_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\DebugHandlersListener
     */
    protected static function getDebug_DebugHandlersListenerService($container)
    {
        return $container->privates['debug.debug_handlers_listener'] = new \Symfony\Component\HttpKernel\EventListener\DebugHandlersListener(NULL, $container->getEnv('bool:default::key:web:default:kernel.runtime_mode:'));
    }

    /**
     * Gets the private 'debug.event_dispatcher.inner' shared service.
     *
     * @return \Symfony\Component\EventDispatcher\EventDispatcher
     */
    protected static function getDebug_EventDispatcher_InnerService($container)
    {
        return $container->privates['debug.event_dispatcher.inner'] = new \Symfony\Component\EventDispatcher\EventDispatcher();
    }

    /**
     * Gets the private 'disallow_search_engine_index_response_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\DisallowRobotsIndexingListener
     */
    protected static function getDisallowSearchEngineIndexResponseListenerService($container)
    {
        return $container->privates['disallow_search_engine_index_response_listener'] = new \Symfony\Component\HttpKernel\EventListener\DisallowRobotsIndexingListener();
    }

    /**
     * Gets the private 'exception_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\ErrorListener
     */
    protected static function getExceptionListenerService($container)
    {
        return $container->privates['exception_listener'] = new \Symfony\Component\HttpKernel\EventListener\ErrorListener('error_controller', ($container->privates['logger'] ?? self::getLoggerService($container)), true, []);
    }

    /**
     * Gets the private 'identity_translator' shared service.
     *
     * @return \Symfony\Component\Translation\IdentityTranslator
     */
    protected static function getIdentityTranslatorService($container)
    {
        return $container->privates['identity_translator'] = new \Symfony\Component\Translation\IdentityTranslator();
    }

    /**
     * Gets the private 'locale_aware_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\LocaleAwareListener
     */
    protected static function getLocaleAwareListenerService($container)
    {
        return $container->privates['locale_aware_listener'] = new \Symfony\Component\HttpKernel\EventListener\LocaleAwareListener(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['slugger'] ??= new \Symfony\Component\String\Slugger\AsciiSlugger('en'));
            yield 1 => ($container->services['translator'] ?? self::getTranslatorService($container));
            yield 2 => ($container->privates['translation.locale_switcher'] ?? $container->load('getTranslation_LocaleSwitcherService'));
        }, 3), ($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()));
    }

    /**
     * Gets the private 'locale_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\LocaleListener
     */
    protected static function getLocaleListenerService($container)
    {
        return $container->privates['locale_listener'] = new \Symfony\Component\HttpKernel\EventListener\LocaleListener(($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), 'en', ($container->services['router'] ?? self::getRouterService($container)), false, []);
    }

    /**
     * Gets the private 'logger' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Log\Logger
     */
    protected static function getLoggerService($container)
    {
        return $container->privates['logger'] = new \Symfony\Component\HttpKernel\Log\Logger(NULL, NULL, NULL, ($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), $container->getEnv('bool:default::key:web:default:kernel.runtime_mode:'));
    }

    /**
     * Gets the private 'messenger.retry_strategy_locator' shared service.
     *
     * @return \Symfony\Component\DependencyInjection\ServiceLocator
     */
    protected static function getMessenger_RetryStrategyLocatorService($container)
    {
        return $container->privates['messenger.retry_strategy_locator'] = new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [], []);
    }

    /**
     * Gets the private 'mime_types' shared service.
     *
     * @return \Symfony\Component\Mime\MimeTypes
     */
    protected static function getMimeTypesService($container)
    {
        $container->privates['mime_types'] = $instance = new \Symfony\Component\Mime\MimeTypes();

        $instance->setDefault($instance);

        return $instance;
    }

    /**
     * Gets the private 'parameter_bag' shared service.
     *
     * @return \Symfony\Component\DependencyInjection\ParameterBag\ContainerBag
     */
    protected static function getParameterBagService($container)
    {
        return $container->privates['parameter_bag'] = new \Symfony\Component\DependencyInjection\ParameterBag\ContainerBag($container);
    }

    /**
     * Gets the private 'property_accessor' shared service.
     *
     * @return \Symfony\Component\PropertyAccess\PropertyAccessor
     */
    protected static function getPropertyAccessorService($container)
    {
        $a = ($container->privates['property_info.reflection_extractor'] ??= new \Symfony\Component\PropertyInfo\Extractor\ReflectionExtractor());

        return $container->privates['property_accessor'] = new \Symfony\Component\PropertyAccess\PropertyAccessor(3, 2, ($container->privates['cache.property_access'] ??= new \Symfony\Component\Cache\Adapter\ArrayAdapter(0, false)), $a, $a);
    }

    /**
     * Gets the private 'property_info' shared service.
     *
     * @return \Symfony\Component\PropertyInfo\PropertyInfoExtractor
     */
    protected static function getPropertyInfoService($container)
    {
        return $container->privates['property_info'] = new \Symfony\Component\PropertyInfo\PropertyInfoExtractor(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['property_info.serializer_extractor'] ?? $container->load('getPropertyInfo_SerializerExtractorService'));
            yield 1 => ($container->privates['property_info.reflection_extractor'] ??= new \Symfony\Component\PropertyInfo\Extractor\ReflectionExtractor());
        }, 2), new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['property_info.phpstan_extractor'] ??= new \Symfony\Component\PropertyInfo\Extractor\PhpStanExtractor());
            yield 1 => ($container->privates['property_info.php_doc_extractor'] ??= new \Symfony\Component\PropertyInfo\Extractor\PhpDocExtractor());
            yield 2 => ($container->privates['property_info.reflection_extractor'] ??= new \Symfony\Component\PropertyInfo\Extractor\ReflectionExtractor());
        }, 3), new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['property_info.php_doc_extractor'] ??= new \Symfony\Component\PropertyInfo\Extractor\PhpDocExtractor());
        }, 1), new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['property_info.reflection_extractor'] ??= new \Symfony\Component\PropertyInfo\Extractor\ReflectionExtractor());
        }, 1), new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['property_info.reflection_extractor'] ??= new \Symfony\Component\PropertyInfo\Extractor\ReflectionExtractor());
        }, 1));
    }

    /**
     * Gets the private 'property_info.reflection_extractor' shared service.
     *
     * @return \Symfony\Component\PropertyInfo\Extractor\ReflectionExtractor
     */
    protected static function getPropertyInfo_ReflectionExtractorService($container)
    {
        return $container->privates['property_info.reflection_extractor'] = new \Symfony\Component\PropertyInfo\Extractor\ReflectionExtractor();
    }

    /**
     * Gets the private 'response_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\ResponseListener
     */
    protected static function getResponseListenerService($container)
    {
        return $container->privates['response_listener'] = new \Symfony\Component\HttpKernel\EventListener\ResponseListener('UTF-8', false);
    }

    /**
     * Gets the private 'router.expression_language_provider' shared service.
     *
     * @return \Symfony\Component\Routing\Matcher\ExpressionLanguageProvider
     */
    protected static function getRouter_ExpressionLanguageProviderService($container)
    {
        return $container->privates['router.expression_language_provider'] = new \Symfony\Component\Routing\Matcher\ExpressionLanguageProvider(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'env' => ['privates', 'container.getenv', 'getContainer_GetenvService', true],
            'service' => ['services', 'container.get_routing_condition_service', 'getContainer_GetRoutingConditionServiceService', true],
        ], [
            'env' => 'Closure',
            'service' => 'Closure',
        ]));
    }

    /**
     * Gets the private 'router.request_context' shared service.
     *
     * @return \Symfony\Component\Routing\RequestContext
     */
    protected static function getRouter_RequestContextService($container)
    {
        $container->privates['router.request_context'] = $instance = \Symfony\Component\Routing\RequestContext::fromUri('', 'localhost', 'http', 80, 443);

        $instance->setParameter('_functions', ($container->privates['router.expression_language_provider'] ?? self::getRouter_ExpressionLanguageProviderService($container)));

        return $instance;
    }

    /**
     * Gets the private 'router_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\RouterListener
     */
    protected static function getRouterListenerService($container)
    {
        return $container->privates['router_listener'] = new \Symfony\Component\HttpKernel\EventListener\RouterListener(($container->services['router'] ?? self::getRouterService($container)), ($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), ($container->privates['router.request_context'] ?? self::getRouter_RequestContextService($container)), ($container->privates['logger'] ?? self::getLoggerService($container)), \dirname(__DIR__, 4), true);
    }

    /**
     * Gets the private 'serializer' shared service.
     *
     * @return \Symfony\Component\Serializer\Serializer
     */
    protected static function getSerializerService($container)
    {
        return $container->privates['serializer'] = new \Symfony\Component\Serializer\Serializer([($container->privates['serializer.denormalizer.unwrapping'] ?? self::getSerializer_Denormalizer_UnwrappingService($container)), ($container->privates['serializer.normalizer.flatten_exception'] ??= new \Symfony\Component\Messenger\Transport\Serialization\Normalizer\FlattenExceptionNormalizer()), ($container->privates['serializer.normalizer.problem'] ?? self::getSerializer_Normalizer_ProblemService($container)), ($container->privates['serializer.normalizer.uid'] ??= new \Symfony\Component\Serializer\Normalizer\UidNormalizer()), ($container->privates['serializer.normalizer.datetime'] ??= new \Symfony\Component\Serializer\Normalizer\DateTimeNormalizer()), ($container->privates['serializer.normalizer.constraint_violation_list'] ?? self::getSerializer_Normalizer_ConstraintViolationListService($container)), ($container->privates['serializer.normalizer.mime_message'] ?? self::getSerializer_Normalizer_MimeMessageService($container)), ($container->privates['serializer.normalizer.datetimezone'] ??= new \Symfony\Component\Serializer\Normalizer\DateTimeZoneNormalizer()), ($container->privates['serializer.normalizer.dateinterval'] ??= new \Symfony\Component\Serializer\Normalizer\DateIntervalNormalizer()), ($container->privates['serializer.normalizer.form_error'] ??= new \Symfony\Component\Serializer\Normalizer\FormErrorNormalizer()), ($container->privates['serializer.normalizer.backed_enum'] ??= new \Symfony\Component\Serializer\Normalizer\BackedEnumNormalizer()), ($container->privates['serializer.normalizer.data_uri'] ?? self::getSerializer_Normalizer_DataUriService($container)), ($container->privates['serializer.normalizer.translatable'] ?? self::getSerializer_Normalizer_TranslatableService($container)), ($container->privates['serializer.normalizer.json_serializable'] ??= new \Symfony\Component\Serializer\Normalizer\JsonSerializableNormalizer(NULL, NULL)), ($container->privates['serializer.denormalizer.array'] ??= new \Symfony\Component\Serializer\Normalizer\ArrayDenormalizer()), ($container->privates['serializer.normalizer.object'] ?? self::getSerializer_Normalizer_ObjectService($container))], [($container->privates['serializer.encoder.xml'] ??= new \Symfony\Component\Serializer\Encoder\XmlEncoder()), ($container->privates['serializer.encoder.json'] ??= new \Symfony\Component\Serializer\Encoder\JsonEncoder(NULL, NULL)), ($container->privates['serializer.encoder.yaml'] ??= new \Symfony\Component\Serializer\Encoder\YamlEncoder(NULL, NULL)), ($container->privates['serializer.encoder.csv'] ??= new \Symfony\Component\Serializer\Encoder\CsvEncoder())]);
    }

    /**
     * Gets the private 'serializer.denormalizer.array' shared service.
     *
     * @return \Symfony\Component\Serializer\Normalizer\ArrayDenormalizer
     */
    protected static function getSerializer_Denormalizer_ArrayService($container)
    {
        return $container->privates['serializer.denormalizer.array'] = new \Symfony\Component\Serializer\Normalizer\ArrayDenormalizer();
    }

    /**
     * Gets the private 'serializer.denormalizer.unwrapping' shared service.
     *
     * @return \Symfony\Component\Serializer\Normalizer\UnwrappingDenormalizer
     */
    protected static function getSerializer_Denormalizer_UnwrappingService($container)
    {
        return $container->privates['serializer.denormalizer.unwrapping'] = new \Symfony\Component\Serializer\Normalizer\UnwrappingDenormalizer(($container->privates['property_accessor'] ?? self::getPropertyAccessorService($container)));
    }

    /**
     * Gets the private 'serializer.encoder.csv' shared service.
     *
     * @return \Symfony\Component\Serializer\Encoder\CsvEncoder
     */
    protected static function getSerializer_Encoder_CsvService($container)
    {
        return $container->privates['serializer.encoder.csv'] = new \Symfony\Component\Serializer\Encoder\CsvEncoder();
    }

    /**
     * Gets the private 'serializer.encoder.json' shared service.
     *
     * @return \Symfony\Component\Serializer\Encoder\JsonEncoder
     */
    protected static function getSerializer_Encoder_JsonService($container)
    {
        return $container->privates['serializer.encoder.json'] = new \Symfony\Component\Serializer\Encoder\JsonEncoder(NULL, NULL);
    }

    /**
     * Gets the private 'serializer.encoder.xml' shared service.
     *
     * @return \Symfony\Component\Serializer\Encoder\XmlEncoder
     */
    protected static function getSerializer_Encoder_XmlService($container)
    {
        return $container->privates['serializer.encoder.xml'] = new \Symfony\Component\Serializer\Encoder\XmlEncoder();
    }

    /**
     * Gets the private 'serializer.encoder.yaml' shared service.
     *
     * @return \Symfony\Component\Serializer\Encoder\YamlEncoder
     */
    protected static function getSerializer_Encoder_YamlService($container)
    {
        return $container->privates['serializer.encoder.yaml'] = new \Symfony\Component\Serializer\Encoder\YamlEncoder(NULL, NULL);
    }

    /**
     * Gets the private 'serializer.mapping.chain_loader' shared service.
     *
     * @return \Symfony\Component\Serializer\Mapping\Loader\LoaderChain
     */
    protected static function getSerializer_Mapping_ChainLoaderService($container)
    {
        return $container->privates['serializer.mapping.chain_loader'] = new \Symfony\Component\Serializer\Mapping\Loader\LoaderChain([new \Symfony\Component\Serializer\Mapping\Loader\AttributeLoader()]);
    }

    /**
     * Gets the private 'serializer.mapping.class_discriminator_resolver' shared service.
     *
     * @return \Symfony\Component\Serializer\Mapping\ClassDiscriminatorFromClassMetadata
     */
    protected static function getSerializer_Mapping_ClassDiscriminatorResolverService($container)
    {
        return $container->privates['serializer.mapping.class_discriminator_resolver'] = new \Symfony\Component\Serializer\Mapping\ClassDiscriminatorFromClassMetadata(($container->privates['serializer.mapping.class_metadata_factory'] ?? self::getSerializer_Mapping_ClassMetadataFactoryService($container)));
    }

    /**
     * Gets the private 'serializer.mapping.class_metadata_factory' shared service.
     *
     * @return \Symfony\Component\Serializer\Mapping\Factory\ClassMetadataFactory
     */
    protected static function getSerializer_Mapping_ClassMetadataFactoryService($container)
    {
        return $container->privates['serializer.mapping.class_metadata_factory'] = new \Symfony\Component\Serializer\Mapping\Factory\ClassMetadataFactory(($container->privates['serializer.mapping.chain_loader'] ?? self::getSerializer_Mapping_ChainLoaderService($container)));
    }

    /**
     * Gets the private 'serializer.name_converter.metadata_aware' shared service.
     *
     * @return \Symfony\Component\Serializer\NameConverter\MetadataAwareNameConverter
     */
    protected static function getSerializer_NameConverter_MetadataAwareService($container)
    {
        return $container->privates['serializer.name_converter.metadata_aware'] = new \Symfony\Component\Serializer\NameConverter\MetadataAwareNameConverter(($container->privates['serializer.mapping.class_metadata_factory'] ?? self::getSerializer_Mapping_ClassMetadataFactoryService($container)));
    }

    /**
     * Gets the private 'serializer.normalizer.backed_enum' shared service.
     *
     * @return \Symfony\Component\Serializer\Normalizer\BackedEnumNormalizer
     */
    protected static function getSerializer_Normalizer_BackedEnumService($container)
    {
        return $container->privates['serializer.normalizer.backed_enum'] = new \Symfony\Component\Serializer\Normalizer\BackedEnumNormalizer();
    }

    /**
     * Gets the private 'serializer.normalizer.constraint_violation_list' shared autowired service.
     *
     * @return \Symfony\Component\Serializer\Normalizer\ConstraintViolationListNormalizer
     */
    protected static function getSerializer_Normalizer_ConstraintViolationListService($container)
    {
        return $container->privates['serializer.normalizer.constraint_violation_list'] = new \Symfony\Component\Serializer\Normalizer\ConstraintViolationListNormalizer([], ($container->privates['serializer.name_converter.metadata_aware'] ?? self::getSerializer_NameConverter_MetadataAwareService($container)));
    }

    /**
     * Gets the private 'serializer.normalizer.data_uri' shared service.
     *
     * @return \Symfony\Component\Serializer\Normalizer\DataUriNormalizer
     */
    protected static function getSerializer_Normalizer_DataUriService($container)
    {
        return $container->privates['serializer.normalizer.data_uri'] = new \Symfony\Component\Serializer\Normalizer\DataUriNormalizer(($container->privates['mime_types'] ?? self::getMimeTypesService($container)));
    }

    /**
     * Gets the private 'serializer.normalizer.dateinterval' shared service.
     *
     * @return \Symfony\Component\Serializer\Normalizer\DateIntervalNormalizer
     */
    protected static function getSerializer_Normalizer_DateintervalService($container)
    {
        return $container->privates['serializer.normalizer.dateinterval'] = new \Symfony\Component\Serializer\Normalizer\DateIntervalNormalizer();
    }

    /**
     * Gets the private 'serializer.normalizer.datetime' shared service.
     *
     * @return \Symfony\Component\Serializer\Normalizer\DateTimeNormalizer
     */
    protected static function getSerializer_Normalizer_DatetimeService($container)
    {
        return $container->privates['serializer.normalizer.datetime'] = new \Symfony\Component\Serializer\Normalizer\DateTimeNormalizer();
    }

    /**
     * Gets the private 'serializer.normalizer.datetimezone' shared service.
     *
     * @return \Symfony\Component\Serializer\Normalizer\DateTimeZoneNormalizer
     */
    protected static function getSerializer_Normalizer_DatetimezoneService($container)
    {
        return $container->privates['serializer.normalizer.datetimezone'] = new \Symfony\Component\Serializer\Normalizer\DateTimeZoneNormalizer();
    }

    /**
     * Gets the private 'serializer.normalizer.flatten_exception' shared service.
     *
     * @return \Symfony\Component\Messenger\Transport\Serialization\Normalizer\FlattenExceptionNormalizer
     */
    protected static function getSerializer_Normalizer_FlattenExceptionService($container)
    {
        return $container->privates['serializer.normalizer.flatten_exception'] = new \Symfony\Component\Messenger\Transport\Serialization\Normalizer\FlattenExceptionNormalizer();
    }

    /**
     * Gets the private 'serializer.normalizer.form_error' shared service.
     *
     * @return \Symfony\Component\Serializer\Normalizer\FormErrorNormalizer
     */
    protected static function getSerializer_Normalizer_FormErrorService($container)
    {
        return $container->privates['serializer.normalizer.form_error'] = new \Symfony\Component\Serializer\Normalizer\FormErrorNormalizer();
    }

    /**
     * Gets the private 'serializer.normalizer.json_serializable' shared service.
     *
     * @return \Symfony\Component\Serializer\Normalizer\JsonSerializableNormalizer
     */
    protected static function getSerializer_Normalizer_JsonSerializableService($container)
    {
        return $container->privates['serializer.normalizer.json_serializable'] = new \Symfony\Component\Serializer\Normalizer\JsonSerializableNormalizer(NULL, NULL);
    }

    /**
     * Gets the private 'serializer.normalizer.mime_message' shared service.
     *
     * @return \Symfony\Component\Serializer\Normalizer\MimeMessageNormalizer
     */
    protected static function getSerializer_Normalizer_MimeMessageService($container)
    {
        return $container->privates['serializer.normalizer.mime_message'] = new \Symfony\Component\Serializer\Normalizer\MimeMessageNormalizer(($container->privates['serializer.normalizer.property'] ?? self::getSerializer_Normalizer_PropertyService($container)));
    }

    /**
     * Gets the private 'serializer.normalizer.object' shared service.
     *
     * @return \Symfony\Component\Serializer\Normalizer\ObjectNormalizer
     */
    protected static function getSerializer_Normalizer_ObjectService($container)
    {
        $a = ($container->privates['property_info'] ?? self::getPropertyInfoService($container));

        return $container->privates['serializer.normalizer.object'] = new \Symfony\Component\Serializer\Normalizer\ObjectNormalizer(($container->privates['serializer.mapping.class_metadata_factory'] ?? self::getSerializer_Mapping_ClassMetadataFactoryService($container)), ($container->privates['serializer.name_converter.metadata_aware'] ?? self::getSerializer_NameConverter_MetadataAwareService($container)), ($container->privates['property_accessor'] ?? self::getPropertyAccessorService($container)), $a, ($container->privates['serializer.mapping.class_discriminator_resolver'] ?? self::getSerializer_Mapping_ClassDiscriminatorResolverService($container)), NULL, [], $a);
    }

    /**
     * Gets the private 'serializer.normalizer.problem' shared service.
     *
     * @return \Symfony\Component\Serializer\Normalizer\ProblemNormalizer
     */
    protected static function getSerializer_Normalizer_ProblemService($container)
    {
        return $container->privates['serializer.normalizer.problem'] = new \Symfony\Component\Serializer\Normalizer\ProblemNormalizer(true, translator: ($container->services['translator'] ?? self::getTranslatorService($container)));
    }

    /**
     * Gets the private 'serializer.normalizer.property' shared service.
     *
     * @return \Symfony\Component\Serializer\Normalizer\PropertyNormalizer
     */
    protected static function getSerializer_Normalizer_PropertyService($container)
    {
        return $container->privates['serializer.normalizer.property'] = new \Symfony\Component\Serializer\Normalizer\PropertyNormalizer(($container->privates['serializer.mapping.class_metadata_factory'] ?? self::getSerializer_Mapping_ClassMetadataFactoryService($container)), ($container->privates['serializer.name_converter.metadata_aware'] ?? self::getSerializer_NameConverter_MetadataAwareService($container)), ($container->privates['property_info'] ?? self::getPropertyInfoService($container)), ($container->privates['serializer.mapping.class_discriminator_resolver'] ?? self::getSerializer_Mapping_ClassDiscriminatorResolverService($container)), NULL, []);
    }

    /**
     * Gets the private 'serializer.normalizer.translatable' shared service.
     *
     * @return \Symfony\Component\Serializer\Normalizer\TranslatableNormalizer
     */
    protected static function getSerializer_Normalizer_TranslatableService($container)
    {
        return $container->privates['serializer.normalizer.translatable'] = new \Symfony\Component\Serializer\Normalizer\TranslatableNormalizer(($container->services['translator'] ?? self::getTranslatorService($container)));
    }

    /**
     * Gets the private 'serializer.normalizer.uid' shared service.
     *
     * @return \Symfony\Component\Serializer\Normalizer\UidNormalizer
     */
    protected static function getSerializer_Normalizer_UidService($container)
    {
        return $container->privates['serializer.normalizer.uid'] = new \Symfony\Component\Serializer\Normalizer\UidNormalizer();
    }

    /**
     * Gets the private 'translator.formatter.default' shared service.
     *
     * @return \Symfony\Component\Translation\Formatter\MessageFormatter
     */
    protected static function getTranslator_Formatter_DefaultService($container)
    {
        return $container->privates['translator.formatter.default'] = new \Symfony\Component\Translation\Formatter\MessageFormatter(($container->privates['identity_translator'] ??= new \Symfony\Component\Translation\IdentityTranslator()));
    }

    /**
     * Gets the private 'validate_request_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\ValidateRequestListener
     */
    protected static function getValidateRequestListenerService($container)
    {
        return $container->privates['validate_request_listener'] = new \Symfony\Component\HttpKernel\EventListener\ValidateRequestListener();
    }

    /**
     * Gets the private 'validator' shared service.
     *
     * @return \Symfony\Component\Validator\Validator\ValidatorInterface
     */
    protected static function getValidatorService($container)
    {
        return $container->privates['validator'] = ($container->privates['validator.builder'] ?? self::getValidator_BuilderService($container))->getValidator();
    }

    /**
     * Gets the private 'validator.builder' shared service.
     *
     * @return \Symfony\Component\Validator\ValidatorBuilder
     */
    protected static function getValidator_BuilderService($container)
    {
        $container->privates['validator.builder'] = $instance = \Symfony\Component\Validator\Validation::createValidatorBuilder();

        $instance->setConstraintValidatorFactory(($container->privates['validator.validator_factory'] ?? self::getValidator_ValidatorFactoryService($container)));
        $instance->setGroupProviderLocator(($container->privates['messenger.retry_strategy_locator'] ??= new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [], [])));
        if ($container->has('translator')) {
            $instance->setTranslator(($container->services['translator'] ?? self::getTranslatorService($container)));
        }
        $instance->setTranslationDomain('validators');
        $instance->addXmlMappings(['C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\form/Resources/config/validation.xml']);
        $instance->enableAttributeMapping();
        $instance->addMethodMapping('loadValidatorMetadata');
        $instance->addObjectInitializers([]);
        $instance->addLoader(($container->privates['validator.property_info_loader'] ?? self::getValidator_PropertyInfoLoaderService($container)));

        return $instance;
    }

    /**
     * Gets the private 'validator.property_info_loader' shared service.
     *
     * @return \Symfony\Component\Validator\Mapping\Loader\PropertyInfoLoader
     */
    protected static function getValidator_PropertyInfoLoaderService($container)
    {
        $a = ($container->privates['property_info'] ?? self::getPropertyInfoService($container));

        return $container->privates['validator.property_info_loader'] = new \Symfony\Component\Validator\Mapping\Loader\PropertyInfoLoader($a, $a, $a, NULL);
    }

    /**
     * Gets the private 'validator.validator_factory' shared service.
     *
     * @return \Symfony\Component\Validator\ContainerConstraintValidatorFactory
     */
    protected static function getValidator_ValidatorFactoryService($container)
    {
        return $container->privates['validator.validator_factory'] = new \Symfony\Component\Validator\ContainerConstraintValidatorFactory(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'validator.expression' => ['privates', 'validator.expression', 'getValidator_ExpressionService', true],
            'Symfony\\Component\\Validator\\Constraints\\ExpressionValidator' => ['privates', 'validator.expression', 'getValidator_ExpressionService', true],
            'Symfony\\Component\\Validator\\Constraints\\EmailValidator' => ['privates', 'validator.email', 'getValidator_EmailService', true],
            'Symfony\\Component\\Validator\\Constraints\\NotCompromisedPasswordValidator' => ['privates', 'validator.not_compromised_password', 'getValidator_NotCompromisedPasswordService', true],
            'Symfony\\Component\\Validator\\Constraints\\WhenValidator' => ['privates', 'validator.when', 'getValidator_WhenService', true],
            'Symfony\\Component\\Validator\\Constraints\\NoSuspiciousCharactersValidator' => ['privates', 'validator.no_suspicious_characters', 'getValidator_NoSuspiciousCharactersService', true],
        ], [
            'validator.expression' => '?',
            'Symfony\\Component\\Validator\\Constraints\\ExpressionValidator' => '?',
            'Symfony\\Component\\Validator\\Constraints\\EmailValidator' => '?',
            'Symfony\\Component\\Validator\\Constraints\\NotCompromisedPasswordValidator' => '?',
            'Symfony\\Component\\Validator\\Constraints\\WhenValidator' => '?',
            'Symfony\\Component\\Validator\\Constraints\\NoSuspiciousCharactersValidator' => '?',
        ]));
    }

    /**
     * Gets the private 'web_link.add_link_header_listener' shared service.
     *
     * @return \Symfony\Component\WebLink\EventListener\AddLinkHeaderListener
     */
    protected static function getWebLink_AddLinkHeaderListenerService($container)
    {
        return $container->privates['web_link.add_link_header_listener'] = new \Symfony\Component\WebLink\EventListener\AddLinkHeaderListener(($container->privates['web_link.http_header_serializer'] ??= new \Symfony\Component\WebLink\HttpHeaderSerializer()));
    }

    /**
     * Gets the private 'web_link.http_header_serializer' shared service.
     *
     * @return \Symfony\Component\WebLink\HttpHeaderSerializer
     */
    protected static function getWebLink_HttpHeaderSerializerService($container)
    {
        return $container->privates['web_link.http_header_serializer'] = new \Symfony\Component\WebLink\HttpHeaderSerializer();
    }

    public function getParameter(string $name): array|bool|string|int|float|\UnitEnum|null
    {
        if (isset($this->buildParameters[$name])) {
            return $this->buildParameters[$name];
        }

        if (!(isset($this->parameters[$name]) || isset($this->loadedDynamicParameters[$name]) || \array_key_exists($name, $this->parameters))) {
            throw new ParameterNotFoundException($name);
        }
        if (isset($this->loadedDynamicParameters[$name])) {
            return $this->loadedDynamicParameters[$name] ? $this->dynamicParameters[$name] : $this->getDynamicParameter($name);
        }

        return $this->parameters[$name];
    }

    public function hasParameter(string $name): bool
    {
        if (isset($this->buildParameters[$name])) {
            return true;
        }

        return isset($this->parameters[$name]) || isset($this->loadedDynamicParameters[$name]) || \array_key_exists($name, $this->parameters);
    }

    public function setParameter(string $name, $value): void
    {
        throw new LogicException('Impossible to call set() on a frozen ParameterBag.');
    }

    public function getParameterBag(): ParameterBagInterface
    {
        if (!isset($this->parameterBag)) {
            $parameters = $this->parameters;
            foreach ($this->loadedDynamicParameters as $name => $loaded) {
                $parameters[$name] = $loaded ? $this->dynamicParameters[$name] : $this->getDynamicParameter($name);
            }
            foreach ($this->buildParameters as $name => $value) {
                $parameters[$name] = $value;
            }
            $this->parameterBag = new FrozenParameterBag($parameters);
        }

        return $this->parameterBag;
    }

    private $loadedDynamicParameters = [
        'kernel.runtime_environment' => false,
        'kernel.runtime_mode' => false,
        'kernel.runtime_mode.web' => false,
        'kernel.runtime_mode.cli' => false,
        'kernel.runtime_mode.worker' => false,
        'kernel.build_dir' => false,
        'kernel.cache_dir' => false,
        'debug.file_link_format' => false,
        'debug.container.dump' => false,
        'router.cache_dir' => false,
        'serializer.mapping.cache.file' => false,
        'validator.mapping.cache.file' => false,
    ];
    private $dynamicParameters = [];

    private function getDynamicParameter(string $name)
    {
        $container = $this;
        $value = match ($name) {
            'kernel.runtime_environment' => $container->getEnv('default:kernel.environment:APP_RUNTIME_ENV'),
            'kernel.runtime_mode' => $container->getEnv('query_string:default:container.runtime_mode:APP_RUNTIME_MODE'),
            'kernel.runtime_mode.web' => $container->getEnv('bool:default::key:web:default:kernel.runtime_mode:'),
            'kernel.runtime_mode.cli' => $container->getEnv('not:default:kernel.runtime_mode.web:'),
            'kernel.runtime_mode.worker' => $container->getEnv('bool:default::key:worker:default:kernel.runtime_mode:'),
            'kernel.build_dir' => $container->targetDir.'',
            'kernel.cache_dir' => $container->targetDir.'',
            'debug.file_link_format' => $container->getEnv('default::SYMFONY_IDE'),
            'debug.container.dump' => ($container->targetDir.''.'/App_ShoppingList_Backend_ShoppingListBackendKernelTestDebugContainer.xml'),
            'router.cache_dir' => $container->targetDir.'',
            'serializer.mapping.cache.file' => ($container->targetDir.''.'/serialization.php'),
            'validator.mapping.cache.file' => ($container->targetDir.''.'/validation.php'),
            default => throw new ParameterNotFoundException($name),
        };
        $this->loadedDynamicParameters[$name] = true;

        return $this->dynamicParameters[$name] = $value;
    }

    protected function getDefaultParameters(): array
    {
        return [
            'kernel.project_dir' => \dirname(__DIR__, 4),
            'kernel.environment' => 'test',
            'kernel.debug' => true,
            'kernel.logs_dir' => (\dirname(__DIR__, 3).''.\DIRECTORY_SEPARATOR.'log'),
            'kernel.bundles' => [
                'FrameworkBundle' => 'Symfony\\Bundle\\FrameworkBundle\\FrameworkBundle',
                'TacticianBundle' => 'League\\Tactician\\Bundle\\TacticianBundle',
                'DoctrineBundle' => 'Doctrine\\Bundle\\DoctrineBundle\\DoctrineBundle',
                'FriendsOfBehatSymfonyExtensionBundle' => 'FriendsOfBehat\\SymfonyExtension\\Bundle\\FriendsOfBehatSymfonyExtensionBundle',
            ],
            'kernel.bundles_metadata' => [
                'FrameworkBundle' => [
                    'path' => 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\symfony\\framework-bundle',
                    'namespace' => 'Symfony\\Bundle\\FrameworkBundle',
                ],
                'TacticianBundle' => [
                    'path' => 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\league\\tactician-bundle\\src',
                    'namespace' => 'League\\Tactician\\Bundle',
                ],
                'DoctrineBundle' => [
                    'path' => 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\doctrine\\doctrine-bundle',
                    'namespace' => 'Doctrine\\Bundle\\DoctrineBundle',
                ],
                'FriendsOfBehatSymfonyExtensionBundle' => [
                    'path' => 'C:\\Users\\mfarres\\Desktop\\projects\\eurega\\projects\\mealmoti_symfony_backend\\mealback\\vendor\\friends-of-behat\\symfony-extension\\src\\Bundle',
                    'namespace' => 'FriendsOfBehat\\SymfonyExtension\\Bundle',
                ],
            ],
            'kernel.charset' => 'UTF-8',
            'kernel.container_class' => 'App_ShoppingList_Backend_ShoppingListBackendKernelTestDebugContainer',
            'event_dispatcher.event_aliases' => [
                'Symfony\\Component\\Console\\Event\\ConsoleCommandEvent' => 'console.command',
                'Symfony\\Component\\Console\\Event\\ConsoleErrorEvent' => 'console.error',
                'Symfony\\Component\\Console\\Event\\ConsoleSignalEvent' => 'console.signal',
                'Symfony\\Component\\Console\\Event\\ConsoleTerminateEvent' => 'console.terminate',
                'Symfony\\Component\\Form\\Event\\PreSubmitEvent' => 'form.pre_submit',
                'Symfony\\Component\\Form\\Event\\SubmitEvent' => 'form.submit',
                'Symfony\\Component\\Form\\Event\\PostSubmitEvent' => 'form.post_submit',
                'Symfony\\Component\\Form\\Event\\PreSetDataEvent' => 'form.pre_set_data',
                'Symfony\\Component\\Form\\Event\\PostSetDataEvent' => 'form.post_set_data',
                'Symfony\\Component\\HttpKernel\\Event\\ControllerArgumentsEvent' => 'kernel.controller_arguments',
                'Symfony\\Component\\HttpKernel\\Event\\ControllerEvent' => 'kernel.controller',
                'Symfony\\Component\\HttpKernel\\Event\\ResponseEvent' => 'kernel.response',
                'Symfony\\Component\\HttpKernel\\Event\\FinishRequestEvent' => 'kernel.finish_request',
                'Symfony\\Component\\HttpKernel\\Event\\RequestEvent' => 'kernel.request',
                'Symfony\\Component\\HttpKernel\\Event\\ViewEvent' => 'kernel.view',
                'Symfony\\Component\\HttpKernel\\Event\\ExceptionEvent' => 'kernel.exception',
                'Symfony\\Component\\HttpKernel\\Event\\TerminateEvent' => 'kernel.terminate',
            ],
            'fragment.renderer.hinclude.global_template' => NULL,
            'fragment.path' => '/_fragment',
            'kernel.http_method_override' => false,
            'kernel.trust_x_sendfile_type_header' => false,
            'kernel.trusted_hosts' => [

            ],
            'kernel.default_locale' => 'en',
            'kernel.enabled_locales' => [

            ],
            'kernel.error_controller' => 'error_controller',
            'test.client.parameters' => [

            ],
            'asset.request_context.base_path' => NULL,
            'asset.request_context.secure' => NULL,
            'translator.logging' => false,
            'translator.default_path' => (\dirname(__DIR__, 4).'/translations'),
            'debug.error_handler.throw_at' => -1,
            'router.request_context.host' => 'localhost',
            'router.request_context.scheme' => 'http',
            'router.request_context.base_url' => '',
            'router.resource' => 'kernel::loadRoutes',
            'request_listener.http_port' => 80,
            'request_listener.https_port' => 443,
            'form.type_extension.csrf.enabled' => false,
            'validator.translation_domain' => 'validators',
            'data_collector.templates' => [

            ],
            'console.command.ids' => [
                0 => 'console.command.public_alias.tactician.command.debug',
            ],
        ];
    }
}
